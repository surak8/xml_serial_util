//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace NSLaserCfg {
    public partial class LaserCfgForm {
        #region ctor
        public LaserCfgForm() {
            InitializeComponent();
        }
        #endregion

        #region event-handling methods

        void exitClick(object sender, EventArgs ea) {
            CancelEventArgs cea = new CancelEventArgs();

            Application.Exit(cea);
            if (cea.Cancel) {
                return;
            }
            Application.Exit();
        }

        void formLoad(object sender, EventArgs ea) {
            int nscreens, lastScreen;
            Screen[] avcar;
            Screen avar2;

            avcar = Screen.AllScreens;
            if (avcar != null && (nscreens = avcar.Length) > 0) {
                lastScreen = nscreens - 1;
                if (lastScreen > 0) {
                    avar2 = avcar[lastScreen];
                    this.DesktopLocation = new Point(
                        this.Location.X + avar2.WorkingArea.X,
                        this.Location.Y + avar2.WorkingArea.Y);
                }
            }
        }

        #endregion

        #region main-line method
        [STAThread()]
        public static void Main(string[] args) {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new LaserCfgForm());
        }

        #endregion

        #region constants
        const string OPEN_PATH = @"\\appdeploy\APPDEPLOY\Colt Software\ColtMarking\ConfigFiles\LASERMARK-05";

        #endregion

        OpenFileDialog ofd;

        void setupDialog(bool isImport = true) {
            if (ofd == null) {
                ofd = new OpenFileDialog();
                ofd.InitialDirectory = OPEN_PATH;
                ofd.Filter = "Xml files|*.xml";
                ofd.FilterIndex = 0;
            }
            ofd.Title = isImport ? "Import schema" : "";
        }

        void tsmiOpen_Click(object sender, EventArgs e) {
            setupDialog(false);

            if (ofd.ShowDialog() == DialogResult.OK) {
                DeserializationUtil.doDeserialization(ofd.FileName, typeof(ArrayOfMarkingTaskGroup));
            }
        }

        void smiFileImportXml_Click(object sender, EventArgs e) {
            setupDialog();
            if (ofd.ShowDialog() == DialogResult.OK) {
                InferenceUtil.inferSchema(ofd.FileName);
            }
        }
    }
}
